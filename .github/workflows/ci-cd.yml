name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_BUILDKIT: 1

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      docker-db: ${{ steps.docker-db.outputs.container-id }}
      docker-web: ${{ steps.docker-web.outputs.container-id }}
      docker-tests: ${{ steps.docker-tests.outputs.container-id }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Start database service
      id: docker-db
      run: |
        echo "Starting database..."
        docker-compose up -d db
        echo "Waiting for database to be ready..."
        sleep 60
        echo "Database container ID: $(docker-compose ps -q db)"
        echo "container-id=$(docker-compose ps -q db)" >> $GITHUB_OUTPUT

    - name: Start web service
      id: docker-web
      run: |
        echo "Starting web service..."
        docker-compose up -d web
        echo "Waiting for web service to be ready..."
        sleep 60
        echo "Web container ID: $(docker-compose ps -q web)"
        echo "container-id=$(docker-compose ps -q web)" >> $GITHUB_OUTPUT

    - name: Build tests
      id: docker-tests
      run: |
        echo "Building tests..."
        docker-compose build tests
        echo "Tests container ID: $(docker-compose ps -q tests)"
        echo "container-id=$(docker-compose ps -q tests)" >> $GITHUB_OUTPUT

  unit-tests:
    needs: setup
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Unit Tests
      run: |
        echo "Running Unit Tests..."
        docker-compose run --rm tests dotnet test /app/build-bl/Gamesbakery.BusinessLogic.Tests.dll --filter "Category=Unit" --logger "allure" --results-directory /app/allure-results/unit
        echo "Unit tests completed"

    - name: Copy Unit Test Results
      if: always()
      run: |
        mkdir -p allure-results/unit
        docker cp $(docker-compose ps -q tests):/app/allure-results/unit ./allure-results/unit || true

    - name: Upload Unit Test Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: unit-allure-report
        path: allure-results/unit/

  integration-tests:
    needs: unit-tests
    runs-on: ubuntu-latest
    if: needs.unit-tests.result == 'success'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Integration Tests
      run: |
        echo "Running Integration Tests..."
        docker-compose run --rm tests dotnet test /app/build-da/Gamesbakery.DataAccess.Tests.dll --filter "Category=Integration" --logger "allure" --results-directory /app/allure-results/integration
        echo "Integration tests completed"

    - name: Copy Integration Test Results
      if: always()
      run: |
        mkdir -p allure-results/integration
        docker cp $(docker-compose ps -q tests):/app/allure-results/integration ./allure-results/integration || true

    - name: Upload Integration Test Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-allure-report
        path: allure-results/integration/

  e2e-tests:
    needs: integration-tests
    runs-on: ubuntu-latest
    if: needs.integration-tests.result == 'success'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run E2E Tests
      run: |
        echo "Running E2E Tests..."
        docker-compose run --rm tests dotnet test /app/build-e2e/Gamesbakery.E2E.Tests.dll --filter "Category=E2E" --logger "allure" --results-directory /app/allure-results/e2e
        echo "E2E tests completed"

    - name: Copy E2E Test Results
      if: always()
      run: |
        mkdir -p allure-results/e2e
        docker cp $(docker-compose ps -q tests):/app/allure-results/e2e ./allure-results/e2e || true

    - name: Upload E2E Test Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-allure-report
        path: allure-results/e2e/

  generate-report:
    needs: [unit-tests, integration-tests, e2e-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        path: allure-results

    - name: Generate Allure Report
      run: |
        echo "Combining test results..."
        mkdir -p combined-results
        cp -r allure-results/*/* combined-results/ 2>/dev/null || true
        
        echo "Generating Allure report..."
        docker run --rm -v $(pwd)/combined-results:/app/allure-results -v $(pwd)/allure-report:/app/allure-report node:20 sh -c "
          npm install -g allure-commandline || echo 'Allure CLI already installed'
          allure generate /app/allure-results -o /app/allure-report --clean || echo 'Allure generation failed, but continuing'
        "
        
        echo "Report generated:"
        ls -la allure-report/ || echo "No report generated"

    - name: Upload Final Allure Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: final-allure-report
        path: allure-report/

  cleanup:
    needs: [unit-tests, integration-tests, e2e-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Cleanup containers
      run: |
        echo "Cleaning up containers..."
        docker-compose down -v || true
        docker system prune -f || true