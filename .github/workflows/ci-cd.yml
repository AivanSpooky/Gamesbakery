name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_BUILDKIT: 1

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      db-container: ${{ steps.start-db.outputs.db-container }}
      web-container: ${{ steps.start-web.outputs.web-container }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Start database service
      id: start-db
      run: |
        echo "Starting database service..."
        docker-compose up -d db
        echo "Waiting for database to be ready..."
        timeout=300
        for i in $(seq 1 $timeout); do
          if docker exec $(docker-compose ps -q db) /opt/mssql-tools18/bin/sqlcmd -S localhost,1433 -U sa -P YourStrong@Pass -Q "SELECT 1" -C -N >/dev/null 2>&1; then
            echo "✓ Database ready after ${i}s"
            break
          fi
          echo "Database not ready, attempt ${i}/${timeout}..."
          sleep 1
        done
        if [ $i -eq $timeout ]; then
          echo "❌ Database failed to start within ${timeout}s"
          exit 1
        fi
        echo "db-container=$(docker-compose ps -q db)" >> $GITHUB_OUTPUT

    - name: Start web service
      id: start-web
      run: |
        echo "Starting web service..."
        docker-compose up -d web
        echo "Waiting for web service to be ready..."
        timeout=180
        for i in $(seq 1 $timeout); do
          if curl -f http://localhost:8080/health >/dev/null 2>&1; then
            echo "✓ Web service ready after ${i}s"
            break
          fi
          echo "Web service not ready, attempt ${i}/${timeout}..."
          sleep 1
        done
        if [ $i -eq $timeout ]; then
          echo "❌ Web service failed to start within ${timeout}s"
          exit 1
        fi
        echo "web-container=$(docker-compose ps -q web)" >> $GITHUB_OUTPUT

  unit-tests:
    needs: setup
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build tests
      run: |
        docker-compose build tests

    - name: Run Unit Tests
      run: |
        echo "=== Running Unit Tests ==="
        docker-compose run --rm tests sh -c "
          mkdir -p /app/allure-results/unit
          cd /app/build-bl && dotnet test Gamesbakery.BusinessLogic.Tests.dll --filter 'Category=Unit' --logger 'allure' --results-directory /app/allure-results/unit || true
        "
        echo "Unit tests completed"

    - name: Copy Unit Test Results
      if: always()
      run: |
        mkdir -p allure-results/unit
        docker cp $(docker-compose ps -q tests):/app/allure-results/unit ./allure-results/unit 2>/dev/null || true
        echo "Unit test results copied"

    - name: Upload Unit Test Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: unit-allure-report
        path: allure-results/unit/

  integration-tests:
    needs: [setup, unit-tests]
    runs-on: ubuntu-latest
    if: needs.unit-tests.result == 'success'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build tests
      run: |
        docker-compose build tests

    - name: Run Integration Tests
      run: |
        echo "=== Running Integration Tests ==="
        docker-compose run --rm tests sh -c "
          mkdir -p /app/allure-results/integration
          cd /app/build-da && dotnet test Gamesbakery.DataAccess.Tests.dll --filter 'Category=Integration' --logger 'allure' --results-directory /app/allure-results/integration || true
        "
        echo "Integration tests completed"

    - name: Copy Integration Test Results
      if: always()
      run: |
        mkdir -p allure-results/integration
        docker cp $(docker-compose ps -q tests):/app/allure-results/integration ./allure-results/integration 2>/dev/null || true
        echo "Integration test results copied"

    - name: Upload Integration Test Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-allure-report
        path: allure-results/integration/

  e2e-tests:
    needs: [setup, integration-tests]
    runs-on: ubuntu-latest
    if: needs.integration-tests.result == 'success'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build tests
      run: |
        docker-compose build tests

    - name: Run E2E Tests
      run: |
        echo "=== Running E2E Tests ==="
        docker-compose run --rm tests sh -c "
          mkdir -p /app/allure-results/e2e
          cd /app/build-e2e && dotnet test Gamesbakery.E2E.Tests.dll --filter 'Category=E2E' --logger 'allure' --results-directory /app/allure-results/e2e || true
        "
        echo "E2E tests completed"

    - name: Copy E2E Test Results
      if: always()
      run: |
        mkdir -p allure-results/e2e
        docker cp $(docker-compose ps -q tests):/app/allure-results/e2e ./allure-results/e2e 2>/dev/null || true
        echo "E2E test results copied"

    - name: Upload E2E Test Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-allure-report
        path: allure-results/e2e/

  generate-report:
    needs: [unit-tests, integration-tests, e2e-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        path: allure-results

    - name: Generate Combined Allure Report
      run: |
        echo "Combining test results..."
        mkdir -p combined-results
        find allure-results -name "*.xml" -type f -exec cp {} combined-results/ \;
        
        echo "Generating Allure report..."
        docker run --rm \
          -v $(pwd)/combined-results:/app/allure-results \
          -v $(pwd)/allure-report:/app/allure-report \
          node:20 sh -c "
            npm install -g allure-commandline || echo 'Allure CLI already installed'
            allure generate /app/allure-results -o /app/allure-report --clean || echo 'Allure generation failed, but continuing'
          "
        
        echo "Report generated:"
        ls -la allure-report/ || echo "No report generated"

    - name: Upload Final Allure Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: final-allure-report
        path: allure-report/

  cleanup:
    needs: [unit-tests, integration-tests, e2e-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Cleanup containers
      run: |
        echo "Cleaning up containers..."
        docker-compose down -v || true
        docker system prune -f || true
        echo "Cleanup completed"