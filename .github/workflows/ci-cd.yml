name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_FILE: Gamesbakery/docker-compose.yml

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Build all services
      run: docker compose -f ${{ env.COMPOSE_FILE }} build

    - name: Start services
      run: docker compose -f ${{ env.COMPOSE_FILE }} up -d db web

    - name: Wait for database
      run: timeout 300 sh -c 'until docker exec $(docker compose -f ${{ env.COMPOSE_FILE }} ps -q db) /opt/mssql-tools18/bin/sqlcmd -S localhost,1433 -U sa -P YourStrong@Pass -Q "SELECT 1" -C -N >/dev/null 2>&1; do sleep 1; done'

    - name: Wait for web service
      run: timeout 180 sh -c 'until curl -f http://localhost:8080/health >/dev/null 2>&1; do sleep 1; done'

    - name: Run unit tests
      run: |
        docker compose -f ${{ env.COMPOSE_FILE }} run --rm tests sh -c "
          export ALLURE_RESULTS_DIRECTORY=/app/allure-results/unit
          rm -rf \$ALLURE_RESULTS_DIRECTORY 2>/dev/null || true
          mkdir -p \$ALLURE_RESULTS_DIRECTORY
          cd /app/build-bl && dotnet test Gamesbakery.BusinessLogic.Tests.dll --filter 'Category=Unit' --results-directory \$ALLURE_RESULTS_DIRECTORY || true
        "

    - name: Copy unit test results
      if: always()
      run: |
        mkdir -p allure-results/unit
        docker cp $(docker compose -f ${{ env.COMPOSE_FILE }} ps -q tests):/app/allure-results/unit ./allure-results/unit 2>/dev/null || true

    - name: Upload unit test report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: unit-allure-report
        path: allure-results/unit/

    - name: Run integration tests
      if: always()
      run: |
        docker compose -f ${{ env.COMPOSE_FILE }} run --rm tests sh -c "
          export ALLURE_RESULTS_DIRECTORY=/app/allure-results/integration
          rm -rf \$ALLURE_RESULTS_DIRECTORY 2>/dev/null || true
          mkdir -p \$ALLURE_RESULTS_DIRECTORY
          cd /app/build-da && dotnet test Gamesbakery.DataAccess.Tests.dll --filter 'Category=Integration' --results-directory \$ALLURE_RESULTS_DIRECTORY || true
        "

    - name: Copy integration test results
      if: always()
      run: |
        mkdir -p allure-results/integration
        docker cp $(docker compose -f ${{ env.COMPOSE_FILE }} ps -q tests):/app/allure-results/integration ./allure-results/integration 2>/dev/null || true

    - name: Upload integration test report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-allure-report
        path: allure-results/integration/

    - name: Run E2E tests
      if: always()
      run: |
        docker compose -f ${{ env.COMPOSE_FILE }} run --rm tests sh -c "
          export ALLURE_RESULTS_DIRECTORY=/app/allure-results/e2e
          rm -rf \$ALLURE_RESULTS_DIRECTORY 2>/dev/null || true
          mkdir -p \$ALLURE_RESULTS_DIRECTORY
          cd /app/build-e2e && dotnet test Gamesbakery.E2E.Tests.dll --filter 'Category=E2E' --results-directory \$ALLURE_RESULTS_DIRECTORY || true
        "

    - name: Copy E2E test results
      if: always()
      run: |
        mkdir -p allure-results/e2e
        docker cp $(docker compose -f ${{ env.COMPOSE_FILE }} ps -q tests):/app/allure-results/e2e ./allure-results/e2e 2>/dev/null || true

    - name: Upload E2E test report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-allure-report
        path: allure-results/e2e/

    - name: Cleanup containers
      if: always()
      run: |
        docker compose -f ${{ env.COMPOSE_FILE }} down -v || true
        docker system prune -f || true

  generate-report:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        path: allure-results

    - name: Generate combined Allure report
      run: |
        mkdir -p combined-results
        find allure-results -name "*.json" -type f -exec cp {} combined-results/ \; 2>/dev/null || true
        
        docker run --rm \
          -v $(pwd)/combined-results:/app/allure-results \
          -v $(pwd)/allure-report:/app/allure-report \
          --entrypoint sh node:20 -c "
            npm install -g allure-commandline && \
            allure generate /app/allure-results -o /app/allure-report --clean
          " || true

    - name: Upload final Allure report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: final-allure-report
        path: allure-report/