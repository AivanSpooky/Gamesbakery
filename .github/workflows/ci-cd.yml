name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_FILE: Gamesbakery/docker-compose.yml

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Build all services
      run: docker compose -f ${{ env.COMPOSE_FILE }} build

    - name: Clean database volume
      run: |
        echo "Cleaning database volume to force init script execution..."
        docker compose -f ${{ env.COMPOSE_FILE }} down -v || true
        docker volume rm $(docker volume ls -q | grep gamesbakery_sql-data) 2>/dev/null || true

    - name: Start services
      run: docker compose -f ${{ env.COMPOSE_FILE }} up -d db web

    - name: Wait for database server
      run: |
        echo "Waiting for database server..."
        timeout 300 sh -c 'until docker exec $(docker compose -f ${{ env.COMPOSE_FILE }} ps -q db) /opt/mssql-tools18/bin/sqlcmd -S localhost,1433 -U sa -P YourStrong@Pass -Q "SELECT 1" -C -N >/dev/null 2>&1; do sleep 2; done'
        echo "Database server is up!"

    - name: Create database if not exists
      run: |
        echo "Creating database Gamesbakery if not exists..."
        docker exec $(docker compose -f ${{ env.COMPOSE_FILE }} ps -q db) /opt/mssql-tools18/bin/sqlcmd -S localhost,1433 -U sa -P YourStrong@Pass -Q "IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = 'Gamesbakery') CREATE DATABASE Gamesbakery" -C -N

    - name: Force init script execution
      run: |
        echo "Forcing init-db.sql execution..."
        DB_CONTAINER=$(docker compose -f ${{ env.COMPOSE_FILE }} ps -q db)
        docker cp ./init-db.sql $DB_CONTAINER:/tmp/init-db.sql
        docker exec $DB_CONTAINER /opt/mssql-tools18/bin/sqlcmd -S localhost,1433 -U sa -P YourStrong@Pass -d Gamesbakery -i /tmp/init-db.sql -C -N || true
        echo "Init script executed!"

    - name: Check database logs
      run: |
        echo "Database logs after init:"
        docker logs $(docker compose -f ${{ env.COMPOSE_FILE }} ps -q db) --tail 200

    - name: Wait for database initialization
      run: |
        echo "Waiting for database Gamesbakery to be ready..."
        timeout 300 sh -c 'until docker exec $(docker compose -f ${{ env.COMPOSE_FILE }} ps -q db) /opt/mssql-tools18/bin/sqlcmd -S localhost,1433 -U sa -P YourStrong@Pass -d Gamesbakery -Q "SELECT 1" -C -N >/dev/null 2>&1; do sleep 2; done'
        echo "Database Gamesbakery is ready!"

    - name: Verify database tables and functions
      run: |
        echo "Verifying database schema..."
        docker exec $(docker compose -f ${{ env.COMPOSE_FILE }} ps -q db) /opt/mssql-tools18/bin/sqlcmd -S localhost,1433 -U sa -P YourStrong@Pass -d Gamesbakery -Q "
          PRINT 'Tables:';
          SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE';
          PRINT 'Functions:';
          SELECT name FROM sys.objects WHERE type IN ('FN', 'IF', 'TF');
        " -C -N -h-1 -W

    - name: Apply EF Core Migrations
      id: apply-migrations
      run: |
        echo "Applying EF Core migrations..."
        docker compose -f ${{ env.COMPOSE_FILE }} run --rm tests sh -c "
          cd /app/Gamesbakery.DataAccess && \
          dotnet ef database update --connection 'Server=db,1433;Database=Gamesbakery;User Id=sa;Password=YourStrong@Pass;TrustServerCertificate=True;Encrypt=False;Connection Timeout=60;' --verbose
        "
        echo "Migrations applied!"

    - name: Wait for web service
      id: wait-web
      run: |
        echo "Waiting for web service..."
        timeout 180 sh -c 'until curl -f http://localhost:8080/health >/dev/null 2>&1; do sleep 2; done'
        echo "Web service is ready!"

    - name: Run unit tests
      id: unit-tests
      # run: |
      #   docker compose -f ${{ env.COMPOSE_FILE }} run --rm tests sh -c "
      #     rm -rf /app/allure-results /app/build-*/allure-results 2>/dev/null || true
      #     mkdir -p /app/allure-results/unit
      #     echo 'Running unit tests...'
      #     cd /app/build-bl && dotnet test Gamesbakery.BusinessLogic.Tests.dll --logger 'console;verbosity=minimal' --results-directory /app/allure-results/unit
      #     cp -r /app/allure-results/unit/* /app/allure-results/ 2>/dev/null || true
      #   "

    - name: Copy unit test results
      run: |
        mkdir -p allure-results/unit
        docker compose -f ${{ env.COMPOSE_FILE }} run --rm tests sh -c "
          ls -la /app/allure-results/ 2>/dev/null || echo 'No results found'
          cp -r /app/allure-results/* /tmp/ 2>/dev/null || true
        "
        docker cp $(docker compose -f ${{ env.COMPOSE_FILE }} ps -q tests):/tmp ./allure-results/unit 2>/dev/null || true

    - name: Upload unit test report
      if: always() && steps.unit-tests.outcome == 'success'
      uses: actions/upload-artifact@v4
      with:
        name: unit-allure-report
        path: allure-results/unit/

    - name: Run integration tests
      id: integration-tests
      if: steps.unit-tests.outcome == 'success'
      # run: |
      #   docker compose -f ${{ env.COMPOSE_FILE }} run --rm tests sh -c "
      #     rm -rf /app/allure-results /app/build-*/allure-results 2>/dev/null || true
      #     mkdir -p /app/allure-results/integration
      #     echo 'Running integration tests...'
      #     cd /app/build-da && dotnet test Gamesbakery.DataAccess.Tests.dll --logger 'console;verbosity=minimal' --results-directory /app/allure-results/integration
      #     cp -r /app/allure-results/integration/* /app/allure-results/ 2>/dev/null || true
      #   "

    - name: Copy integration test results
      run: |
        mkdir -p allure-results/integration
        docker compose -f ${{ env.COMPOSE_FILE }} run --rm tests sh -c "
          ls -la /app/allure-results/ 2>/dev/null || echo 'No results found'
          cp -r /app/allure-results/* /tmp/ 2>/dev/null || true
        "
        docker cp $(docker compose -f ${{ env.COMPOSE_FILE }} ps -q tests):/tmp ./allure-results/integration 2>/dev/null || true

    - name: Upload integration test report
      if: always() && (steps.integration-tests.outcome == 'success')
      uses: actions/upload-artifact@v4
      with:
        name: integration-allure-report
        path: allure-results/integration/

    - name: Run E2E tests
      id: e2e-tests
      if: steps.integration-tests.outcome == 'success'
      # run: |
      #   docker compose -f ${{ env.COMPOSE_FILE }} run --rm tests sh -c "
      #     rm -rf /app/allure-results /app/build-*/allure-results 2>/dev/null || true
      #     mkdir -p /app/allure-results/e2e
      #     echo 'Waiting for services in E2E tests...'
      #     timeout 120 sh -c 'until nc -z db 1433; do echo \"DB not ready, waiting...\"; sleep 2; done'
      #     timeout 120 sh -c 'until curl -f http://web:80/health; do echo \"Web not ready, waiting...\"; sleep 2; done'
      #     echo 'Running E2E tests...'
      #     cd /app/build-e2e && dotnet test Gamesbakery.E2E.Tests.dll --logger 'console;verbosity=minimal' --results-directory /app/allure-results/e2e
      #     cp -r /app/allure-results/e2e/* /app/allure-results/ 2>/dev/null || true
      #   "

    - name: Copy E2E test results
      run: |
        mkdir -p allure-results/e2e
        docker compose -f ${{ env.COMPOSE_FILE }} run --rm tests sh -c "
          ls -la /app/allure-results/ 2>/dev/null || echo 'No results found'
          cp -r /app/allure-results/* /tmp/ 2>/dev/null || true
        "
        docker cp $(docker compose -f ${{ env.COMPOSE_FILE }} ps -q tests):/tmp ./allure-results/e2e 2>/dev/null || true

    - name: Upload E2E test report
      if: always() && (steps.e2e-tests.outcome == 'success')
      uses: actions/upload-artifact@v4
      with:
        name: e2e-allure-report
        path: allure-results/e2e/

    - name: Cleanup containers
      if: always()
      run: |
        docker compose -f ${{ env.COMPOSE_FILE }} down -v || true
        docker system prune -f || true

  generate-report:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        path: allure-results

    - name: Generate combined Allure report
      run: |
        mkdir -p combined-results
        find allure-results -name "*.json" -type f -exec cp {} combined-results/ \; 2>/dev/null || true
        find allure-results -name "*.xml" -type f -exec cp {} combined-results/ \; 2>/dev/null || true
        
        echo "Found files in combined-results:"
        ls -la combined-results/ 2>/dev/null || echo "No files found"
        
        docker run --rm \
          -v $(pwd)/combined-results:/app/allure-results \
          -v $(pwd)/allure-report:/app/allure-report \
          --entrypoint sh node:20 -c "
            npm install -g allure-commandline && \
            allure generate /app/allure-results -o /app/allure-report --clean || echo 'Allure generation completed'
          "

    - name: Upload final Allure report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: final-allure-report
        path: allure-report/